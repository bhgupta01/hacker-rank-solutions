import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class HeapSortAlgo {
    public static void main(String... args) {
        List<Integer> input = new ArrayList<>();
        input.add(8);
        input.add(7);
        input.add(9);
        input.add(10);
        input.add(3);
        input.add(4);
        input.add(1);
        input.add(12);
        input.add(6);
        input.add(5);
        HeapSortExample heapSortExample = new HeapSortExample();
        int[] sorted = heapSortExample.heapSort(input);
        StringBuilder builder = new StringBuilder();
        Arrays.stream(sorted).forEach(i -> builder.append(i).append(" "));
        System.out.println(builder.toString());
    }
}

class HeapSortExample {
    public int[] heapSort(List<Integer> input) {
        final int[] sortedInput = new int[input.size()];
        sort(input, sortedInput, 0);
        return sortedInput;
    }

    private void sort(List<Integer> input, int[] sortedInput, int index) {
        if (input.size() <= 0) {
            return;
        } else if (input.size() == 1) {
            sortedInput[index] = input.get(0);
            input.remove(input.size() - 1);
            return;
        }
        heapify(input, input.size() - 1);
        sortedInput[index] = input.get(0);
        int lastElement = input.remove(input.size() - 1);
        if (input.size() > 0) {
            input.set(0, lastElement);
            sort(input, sortedInput, index + 1);
        } else {
            sortedInput[index + 1] = lastElement;
        }
    }

    // logn
    private void heapify(List<Integer> input, int i) {
        System.out.println("heapify " + i);
        if (i <= 0) {
            return;
        }
        int parent_i;
        int sibling_i;
        int next_i;
        if (i % 2 == 0) {
            parent_i = (i - 2) / 2;
            sibling_i = i - 1;
            next_i = i - 2;
        } else {
            parent_i = (i - 1) / 2;
            sibling_i = i + 1;
            next_i = i - 1;
        }
        int parent = input.get(parent_i);
        int child = input.get(i);
        int sibling = Integer.MAX_VALUE;
        if (sibling_i >= 0 && sibling_i < input.size()) {
            sibling = input.get(sibling_i);
        }
        if (parent > child) {
            if (sibling > child) {
                input.set(parent_i, child);
                input.set(i, parent);
            } else {
                input.set(parent_i, sibling);
                input.set(sibling_i, parent);
            }
        } else if (parent > sibling) {
            input.set(parent_i, sibling);
            input.set(sibling_i, parent);
        }
        if (next_i > 0) {
            heapify(input, next_i);
        }
    }
}
